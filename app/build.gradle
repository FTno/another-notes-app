plugins {
    id "com.android.application"
    id "kotlin-android"
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.serialization"
    id "kotlin-allopen"
    id "androidx.navigation.safeargs.kotlin"
    id "com.google.gms.google-services"
    id "com.google.android.gms.oss-licenses-plugin"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.maltaisn.notes"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode appVersion.split(/\./).collect { it.padLeft(2, "0") }.sum().toInteger()
        versionName appVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }

        // Flavor name constants determining the current flavor and toggling
        // things that couldn't be extracted to another source set.
        buildConfigField "String", "FLAVOR_SYNC", '"sync"'
        buildConfigField "String", "FLAVOR_NO_SYNC", '"noSync"'
    }

    viewBinding {
        enabled = true
    }

    sourceSets {
        // This just add "kotlin" folder to source sets since the default is "java".
        main.java.srcDirs += "src/main/kotlin"

        debug.java.srcDirs += "src/debug/kotlin"
        release.java.srcDirs += "src/release/kotlin"

        sync.java.srcDirs += "src/sync/kotlin"
        noSync.java.srcDirs += "src/noSync/kotlin"

        // All test source sets have a shared source set.
        def sharedTestDir = "src/sharedTest/kotlin"
        test.java.srcDirs += [sharedTestDir, "src/test/kotlin"]
        androidTest.java.srcDirs += [sharedTestDir, "src/androidTest/kotlin"]
        testSync.java.srcDirs += [sharedTestDir, "src/testSync/kotlin"]
    }

    signingConfigs {
        release {
            storeFile file(releaseKeyStoreFile)
            storePassword releaseKeyStorePassword
            keyAlias releaseKeyStoreKey
            keyPassword releaseKeyStoreKeyPassword
        }
    }

    buildTypes {
        debug {

        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

    // Sync flavor dimension. This is used to provide a version without sync functionality
    // for F-Droid, because Firebase is not open source so it wouldn't allowed.
    flavorDimensions "sync"

    productFlavors {
        sync {
            dimension "sync"
            applicationIdSuffix ".sync"
            versionNameSuffix "-s"
        }
        noSync {
            dimension "sync"
            applicationIdSuffix ".nosync"
            versionNameSuffix "-ns"
        }
    }

    applicationVariants.all { variant ->
        // Disable google services task in no sync flavor, because it will try to find
        // an inexistant google-services.json file and build will fail.
        if (variant.name == "noSyncDebug") {
            project.tasks.getByName("processNoSyncDebugGoogleServices").enabled = false
        } else if (variant.name == "noSyncRelease") {
            project.tasks.getByName("processNoSyncReleaseGoogleServices").enabled = false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xopt-in=kotlin.ExperimentalStdlibApi",
                "-Xopt-in=kotlin.time.ExperimentalTime",
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.FlowPreview"
        ]
    }
}

dependencies {
    // App dependencies
    implementation "androidx.core:core-ktx:$androidKtxVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "com.google.android.gms:play-services-oss-licenses:$ossLicensesVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assistedInjectVersion"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assistedInjectVersion"

    // Architecture components
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"

    // Navigation component
    implementation "androidx.navigation:navigation-ui:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"
    implementation "androidx.navigation:navigation-fragment:$navVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"

    // Firebase
    syncImplementation "com.google.firebase:firebase-auth:$firebaseAuthVersion"
    syncImplementation "com.google.firebase:firebase-functions-ktx:$firebaseFunctionsVersion"
    syncImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutinesVersion"

    // Debug
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"

    // Dependencies for local unit tests
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$kotlinMockitoVersion"
    testImplementation "androidx.arch.core:core-testing:$androidxArchTestingVersion"
    testImplementation "androidx.test:core:$androidxTestCoreVersion"
    testImplementation "androidx.test:core-ktx:$androidxTestCoreKtxVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidxTestExtVersion"
    testImplementation "androidx.test:rules:$androidxTestRulesVersion"

    // Dependencies for android tests
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoAndroidVersion"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$kotlinMockitoVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
}

allOpen {
    annotation "com.maltaisn.notes.OpenClass"
}
